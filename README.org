#+TITLE: Lambdazonka

This is a project skeleton to show that all of the Haskell [[https://github.com/brendanhay/amazonka][Amazonka
AWS API libraries]] compile with [[https://github.com/ghcjs/ghcjs][GHCJS]] and could be deployed to [[https://aws.amazon.com/lambda/][AWS
Lambda]].

* Basic Dependencies

  - [[https://nodejs.org/en/blog/release/v0.10.36/][Node.js Stable 0.10.x]] - AWS Lambda is [[http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html][currently 0.10.36]].  Don't
    get aggressive with Node.js 4.x and 5.x from Nodesource.  It's not
    necessary and you might run into trouble.
    
  - [[http://haskellstack.org][Haskell Stack]] - Install the latest for your OS and then run `stack
    setup` in your $HOME. This will give you a default GHC
    installation inside the $HOME/.stack directory.
  
* Stack Setup (specific to GHCJS)

  In this project directory (and with stack & node.js in your PATH)
  run the following:
  #+begin_src sh
    stack setup
  #+end_src

  This will bootstrap GHCJS into your $HOME/.stack dir.

* Building the GHCJS Project

  The `hsc2hs` binary is required to be in your PATH in order to build
  Amazonka on GHCJS (or any time you need to rebuild Amazonka).  The
  easiest way to do this is to put one from your OS in the PATH.  I
  tried using an alias to `hsc2hs-ghcjs` (installed by stack as part
  of GHCJS) but it didn't work. I had a native `hsc2hs` in my $HOME
  from running the `stack setup` step above.  This works.  Once the
  dependencies have been built you no longer need the special PATH.
  #+begin_src sh
    export PATH=$HOME/.stack/programs/x86_64-linux/ghc-7.10.3/bin:$PATH
  #+end_src

  Now lets build the project (takes a while)
  #+begin_src sh
    stack build
  #+end_src
  NOTE: Don't worry too much about the warnings show about GHCJS
  packages vs Stack LTS approved versions. This is a known issue and
  people are working on upgrading libraries in `ghcjs-boot`.

  The "executable" (the js files) will be in your .stack-work
  directory.  The easy way to find them is to run:
  #+begin_src sh
    find . -type d -name lambdazonka.jsexe
  #+end_src

  That's it.  The `all.js` file is self-contained and is all you need
  with Node.js or for deployment to the cloud.  Now you are ready for
  AWS Lambda experiments!
